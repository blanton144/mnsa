#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael Blanton
# @Date: Aug 21, 2020
# @Filename: mn_wise
# @License: BSD 3-Clause
# @Copyright: Michael Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import scipy.interpolate as interpolate
import fitsio
import mnsa.utils.configuration as configuration
import crr.reconstruct as reconstruct
import crr.utils.memory
import astropy.wcs as wcs


def psf_func(x, y, i):
    cx = np.float32(psf.shape[1] // 2)
    cy = np.float32(psf.shape[0] // 2)
    lx = x * 0.75 / 2.75
    ly = y * 0.75 / 2.75
    return(psf_interp(lx + cx, ly + cy, grid=False).flatten())


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Creates WISE image at MaNGA sampling')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='v0',
                        help='MNSA configuration version')

    parser.add_argument('-p', '--plate-ifu', dest='plateifu',
                        type=str, required=True,
                        help='plate-ifu for MaNGA observations')

    parser.add_argument('-m', '--model', dest='save_model',
                        action='store_true', required=False, default=False,
                        help='save model')

    parser.add_argument('-c', '--clobber', dest='clobber',
                        action='store_true', required=False, default=False,
                        help='clobber existing files')

    parser.add_argument('-f', '--force-model', dest='force_model',
                        action='store_true', required=False, default=False,
                        help='force regeneration of model')

    args = parser.parse_args()
    version = args.version
    plateifu = args.plateifu
    force_model = args.force_model
    save_model = args.save_model
    clobber = args.clobber

    pad = 12

    mnsa_config = configuration.MNSAConfig(version=version)
    cfg = mnsa_config.cfg

    plate, ifu = [int(x) for x in plateifu.split('-')]
    bands = cfg['WISE']['bands'].split()

    resampled_dir = os.path.join(os.getenv('MNSA_DATA'),
                                 version, 'resampled',
                                 '{p}'.format(p=plate),
                                 '{pifu}'.format(pifu=plateifu))

    mask_file = os.path.join(resampled_dir,
                             'resampled-{plateifu}-mask.fits')
    mask_file = mask_file.format(plateifu=plateifu)
    if(not os.path.exists(mask_file)):
        print("Need mask file to exist first: {m}".format(m=mask_file))
        sys.exit(1)

    model_dir = os.path.join(os.getenv('MNSA_DATA'),
                             version, 'model',
                             '{p}'.format(p=plate),
                             '{pifu}'.format(pifu=plateifu))

    imaging_dir = os.path.join(os.getenv('MNSA_DATA'),
                               version, 'imaging',
                               '{p}'.format(p=plate),
                               plateifu)

    manga_dir = os.path.join(os.getenv('MNSA_DATA'),
                             version, 'manga', 'redux',
                             version,
                             '{p}'.format(p=plate),
                             'stack')
    manga_file = os.path.join(manga_dir,
                              'manga-{plateifu}-LOGCUBE.fits.gz')
    manga_file = manga_file.format(plateifu=plateifu)

    if(not os.path.exists(manga_file)):
        print("MaNGA file not found: {m}".format(m=manga_file))
        sys.exit(1)

    psf_out = fitsio.read(manga_file, ext='RPSF')
    psf_out = np.float32(psf_out)

    mask_hdus = ['MASK', 'MASK_MANGA', 'X_MANGA', 'Y_MANGA', 'X', 'Y']

    print("plate-ifu {p}: mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)
    for band in bands:
        # Read in the header again in case it was altered below
        hdr_out = fitsio.read_header(mask_file, ext='MASK')

        wise_manga_file = os.path.join(resampled_dir,
                                       'resampled-{plateifu}-{band}.fits')
        wise_manga_file = wise_manga_file.format(plateifu=plateifu,
                                                 band=band)

        # skip if we have made this file already
        if(clobber is False):
            if(os.path.exists(wise_manga_file)):
                print("plate-ifu {p}: File exists already for {f}".format(f=wise_manga_file, p=plateifu), flush=True)
                continue

            

        # Read the WISE PSF
        psf_file = os.path.join(imaging_dir,
                                '{plateifu}-custom-psf-{band}.fits.fz')
        psf_file = psf_file.format(plateifu=plateifu, band=band)

        if(os.path.exists(psf_file) is False):
            print("plate-ifu {p}: Skipping case where WISE PSF missing: {p}".format(p=plateifu), flush=True)
            continue 

        print("plate-ifu {p}: Reading PSF: {f}".format(f=psf_file, p=plateifu), flush=True)
        psf = fitsio.read(psf_file)
        psf = psf / psf.sum()
        xpsf = np.arange(psf.shape[1])
        ypsf = np.arange(psf.shape[0])
        xxpsf = np.outer(np.ones(psf.shape[0]), xpsf) 
        yypsf = np.outer(ypsf, np.ones(psf.shape[1]))
        rrpsf = np.sqrt((xxpsf - (psf.shape[1] // 2))**2 +
                        (yypsf - (psf.shape[0] // 2))**2)
        psf = psf * (rrpsf < 10.)  # based on where PSF gets noisy
        psf = psf / psf.sum()
        psf_interp = interpolate.RectBivariateSpline(xpsf, ypsf, psf)

        print("plate-ifu {p}: a mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

        # Read the WISE data
        image_file = os.path.join(imaging_dir,
                                  '{plateifu}-custom-image-{band}.fits.fz')
        image_file = image_file.format(plateifu=plateifu, band=band)
        print("plate-ifu {p}: Reading image: {f}".format(f=image_file, p=plateifu), flush=True)
        image, hdr_in = fitsio.read(image_file, header=True)

        invvar_file = os.path.join(imaging_dir,
                                   '{plateifu}-custom-invvar-{band}.fits.fz')
        invvar_file = invvar_file.format(plateifu=plateifu, band=band)
        print("plate-ifu {p}: Reading invvar: {f}".format(f=invvar_file, p=plateifu), flush=True)
        invvar = fitsio.read(invvar_file)

        print("plate-ifu {p}: b mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

        hdr_in['NAXIS1'] = image.shape[0]
        hdr_in['NAXIS2'] = image.shape[1]

        # Get the WCS info for input and output
        wcs_in = wcs.WCS(header=hdr_in)
        wcs_out = wcs.WCS(header=hdr_out, naxis=[1, 2])

        model_file = os.path.join(model_dir, '{plateifu}-A-{band}.fits')
        model_file = model_file.format(plateifu=plateifu, band=band)
        umodel_file = os.path.join(model_dir, '{plateifu}-untrimmed-A-{band}.fits')
        umodel_file = umodel_file.format(plateifu=plateifu, band=band)
        if(os.path.exists(model_file) & (force_model is False)):
            r = reconstruct.ReconstructWCS(filename=model_file)
        else:
            # Create a reconstruct object in order to calculate which
            # input pixels influence the output
            print("plate-ifu {p}: Making big reconstruction to evaluate coverage".format(p=plateifu), flush=True)
            print("plate-ifu {p}: c mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)
            rall = reconstruct.ReconstructWCS(inwcs=wcs_in, outwcs=wcs_out)
            rall.psf = psf_func
            print("plate-ifu {p}: d mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

            print("plate-ifu {p}: Setting big A matrix".format(p=plateifu), flush=True)
            rall.set_Amatrix()
            print("plate-ifu {p}: e mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)
            coverage = rall.coverage()
            trim = coverage > 1.e-1

            if(save_model):
                os.makedirs(model_dir, exist_ok=True)
                rall.save_model(umodel_file)

            rall = 0
            print("plate-ifu {p}: f mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

            # Create a reconstruct object with only the pixels with coverage
            pad = 20
            print("plate-ifu {p}: Making final reconstruction".format(p=plateifu), flush=True)
            r = reconstruct.ReconstructWCS(inwcs=wcs_in, outwcs=wcs_out,
                                           trim=trim, pad=pad)
            r.psf = psf_func
            print("plate-ifu {p}: g mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

            print("plate-ifu {p}: Setting final A matrix".format(p=plateifu), flush=True)
            r.set_Amatrix()
            print("plate-ifu {p}: h mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

            print("plate-ifu {p}: Performing SVD".format(p=plateifu), flush=True)
            print(reconstruct.__file__)
            r.set_svd()

            print("plate-ifu {p}: i mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

            if(save_model):
                os.makedirs(model_dir, exist_ok=True)
                r.save_model(model_file)

        # Set the input array
        subimage = np.float32(image[r.trim])
        subinvvar = np.float32(invvar[r.trim])

        print("plate-ifu {p}: j mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)
        # Set the weights
        print("plate-ifu {p}: Setting weights".format(p=plateifu), flush=True)
        r.set_weights()

        print("plate-ifu {p}: k mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

        # Apply weights to image and ivar
        print("plate-ifu {p}: Applying weights to image".format(p=plateifu), flush=True)
        image_G = r.apply_weights(subimage.flatten())

        print("plate-ifu {p}: Applying weights to invvar".format(p=plateifu), flush=True)
        inz = np.where(subinvvar > 0)[0]
        var_G = np.einsum('ij,j,ij->i', r.weights[:, inz],
                          1. / subinvvar[inz],
                          r.weights[:, inz]).reshape((r.nx, r.ny))
        ivar_G = 1. / var_G

        print("plate-ifu {p}: l mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

        # Apply weights to PSF image
        psf_samples = r.psf_samples()
        psf_G = r.apply_weights(psf_samples)

        print("plate-ifu {p}: m mem={m}".format(p=plateifu, m=crr.utils.memory.memory()), flush=True)

        os.makedirs(resampled_dir, exist_ok=True)
        fitsio.write(wise_manga_file, image_G[pad:-pad, pad:-pad],
                     header=hdr_out, extname='IMAGE', clobber=True)
        fitsio.write(wise_manga_file, ivar_G[pad:-pad, pad:-pad],
                     header=hdr_out, extname='IVAR', clobber=False)
        fitsio.write(wise_manga_file, psf_G[pad:-pad, pad:-pad],
                     header=hdr_out, extname='PSF', clobber=False)

        for mask_hdu in mask_hdus:
            d, h = fitsio.read(mask_file, ext=mask_hdu, header=True)
            fitsio.write(wise_manga_file, d, extname=mask_hdu, header=h, clobber=False)

        r = 0
