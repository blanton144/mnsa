#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael Blanton
# @Date: Aug 21, 2020
# @Filename: mn_wise
# @License: BSD 3-Clause
# @Copyright: Michael Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import copy
import numpy as np
import scipy.interpolate as interpolate
import fitsio
import mnsa.utils.configuration as configuration
import crr.reconstruct as reconstruct
import astropy.wcs as wcs


def psf_func(x, y, i):
    cx = np.float32(psf.shape[1] // 2)
    cy = np.float32(psf.shape[0] // 2)
    lx = x * 0.75 / 2.75
    ly = y * 0.75 / 2.75
    return(psf_interp(lx + cx, ly + cy, grid=False).flatten())


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Creates WISE image at MaNGA sampling')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='v0',
                        help='MNSA configuration version')

    parser.add_argument('-p', '--plate-ifu', dest='plateifu',
                        type=str, required=True,
                        help='plate-ifu for MaNGA observations')

    parser.add_argument('-m', '--model', dest='save_model',
                        action='store_true', required=False, default=False,
                        help='save model')

    parser.add_argument('-f', '--force-model', dest='force_model',
                        action='store_true', required=False, default=False,
                        help='force regeneration of model')

    args = parser.parse_args()
    version = args.version
    plateifu = args.plateifu
    force_model = args.force_model
    save_model = args.save_model

    pad = 12

    mnsa_config = configuration.MNSAConfig(version=version)
    cfg = mnsa_config.cfg

    plate, ifu = [int(x) for x in plateifu.split('-')]
    bands = cfg['WISE']['bands'].split()

    resampled_dir = os.path.join(os.getenv('MNSA_DATA'),
                                 version, 'resampled',
                                 '{p:05}'.format(p=plate),
                                 '{pifu}'.format(pifu=plateifu))

    model_dir = os.path.join(os.getenv('MNSA_DATA'),
                             version, 'model',
                             '{p:05}'.format(p=plate),
                             '{pifu}'.format(pifu=plateifu))

    imaging_dir = os.path.join(os.getenv('MNSA_DATA'),
                               version, 'imaging',
                               '{p:05}'.format(p=plate),
                               plateifu)

    manga_dir = os.path.join(os.getenv('MNSA_DATA'),
                             version, 'manga', 'redux',
                             '{p}'.format(p=plate),
                             'stack')
    manga_file = os.path.join(manga_dir,
                              'manga-{plateifu}-LOGCUBE.fits.gz')
    manga_file = manga_file.format(plateifu=plateifu)

    hdr_out_orig = fitsio.read_header(manga_file, ext='FLUX')
    psf_out = fitsio.read(manga_file, ext='RPSF')

    for band in bands:

        hdr_out = copy.deepcopy(hdr_out_orig)

        # Read the WISE PSF
        psf_file = os.path.join(imaging_dir,
                                '{plateifu}-custom-psf-{band}.fits.fz')
        psf_file = psf_file.format(plateifu=plateifu, band=band)
        print("Reading PSF: {f}".format(f=psf_file))
        psf = fitsio.read(psf_file)
        psf = psf / psf.sum()
        xpsf = np.arange(psf.shape[1])
        ypsf = np.arange(psf.shape[0])
        psf_interp = interpolate.RectBivariateSpline(xpsf, ypsf, psf)

        # Read the GALEX data
        image_file = os.path.join(imaging_dir,
                                  '{plateifu}-custom-image-{band}.fits.fz')
        image_file = image_file.format(plateifu=plateifu, band=band)
        print("Reading image: {f}".format(f=image_file))
        image, hdr_in = fitsio.read(image_file, header=True)

        invvar_file = os.path.join(imaging_dir,
                                   '{plateifu}-custom-invvar-{band}.fits.fz')
        invvar_file = invvar_file.format(plateifu=plateifu, band=band)
        print("Reading invvar: {f}".format(f=invvar_file))
        invvar = fitsio.read(invvar_file)

        hdr_in['NAXIS1'] = image.shape[0]
        hdr_in['NAXIS2'] = image.shape[1]

        # Get the WCS info for input and output
        wcs_in = wcs.WCS(header=hdr_in)
        wcs_out = wcs.WCS(header=hdr_out, naxis=[1, 2])

        model_file = os.path.join(model_dir, '{plateifu}-A-{band}.fits')
        model_file = model_file.format(plateifu=plateifu, band=band)
        if(os.path.exists(model_file) & (force_model is False)):
            r = reconstruct.ReconstructWCS(filename=model_file)
        else:
            # Create a reconstruct object in order to calculate which
            # input pixels influence the output
            rall = reconstruct.ReconstructWCS(inwcs=wcs_in, outwcs=wcs_out)
            rall.psf = psf_func
            rall.set_Amatrix()
            coverage = rall.coverage()
            trim = coverage > 3.e-3

            # Create a reconstruct object with only the pixels with coverage
            pad = 12
            r = reconstruct.ReconstructWCS(inwcs=wcs_in, outwcs=wcs_out,
                                           trim=trim, pad=pad)
            r.psf = psf_func
            r.set_Amatrix()
            r.set_svd()

            if(save_model):
                os.makedirs(model_dir, exist_ok=True)
                r.save_model(model_file)

        # Set the input array
        subimage = image[r.trim]
        subinvvar = invvar[r.trim]

        r.set_weights()
        image_G = r.apply_weights(subimage.flatten())
        var_G = np.diag(r.weights.dot(np.diag(subinvvar.flatten())).dot(r.weights.T)).reshape((r.nx, r.ny))
        ivar_G = 1. / var_G

        wise_manga_file = os.path.join(resampled_dir,
                                       '{plateifu}-{band}.fits')
        wise_manga_file = wise_manga_file.format(plateifu=plateifu,
                                                 band=band)
        os.makedirs(resampled_dir, exist_ok=True)
        fitsio.write(wise_manga_file, image_G[pad:-pad, pad:-pad],
                     header=hdr_out, clobber=True)
        fitsio.write(wise_manga_file, ivar_G[pad:-pad, pad:-pad],
                     header=hdr_out, clobber=False)
