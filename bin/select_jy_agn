#!/usr/bin/env python
# encoding: utf-8


import os
import sys
import argparse
import matplotlib.pyplot as plt
import fitsio
import numpy as np
import mnsa.jiyan
import astropy.cosmology
import astropy.units


cosmo = astropy.cosmology.Planck18


def log_flux_to_luminosity(redshift=None):
    """Return term to turn log flux to log luminosity

    Parameters
    ----------

    redshift : np.float32 or ndarray of np.flaot32
        redshift of galaxy or galaxies

    Returns
    -------

    logterm : np.float32 or ndarray of np.float32
        term to add to flux to get luminosity
"""
    logterm = - 17.
    dm = cosmo.distmod(redshift).to_value(astropy.units.mag)
    log_dfactor = 0.4 * dm
    log_10pcfactor = np.log10(4. * np.pi) + 2. * (np.log10(3.086) + 19.)
    logterm = logterm + log_10pcfactor + log_dfactor
    return(logterm)


def would_be_agn(redshift=None, cf=None, cf_ivar=None, agn_ratios=None,
                 log_luminosity_o3=None):
    """Return whether a given luminosity will pass the limit to be classified as AGN

    Parameters
    ----------

    redshift : np.float32
        redshift of galaxy

    cf : dict of np.float32
        fluxes for each line

    cf_ivar : dict of np.float32
        inverse variance of fluxes for each line

    agn_ratios : dict of np.float32
        ratios of lines relative to [OIII] for typical AGN

    log_luminosity_o3 : np.float32
        limiting [OIII] luminosity
    
    Returns
    -------

    detected : ndarray of bool
        are the necessary lines detected

    isagn : ndarray of bool
        is this an identified AGN

    p1 : ndarray of np.float32
        P1 component of Ji & Yan space

    p2 : ndarray of np.float32
        P2 component of Ji & Yan space

    p3 : ndarray of np.float32
        P3 component of Ji & Yan space

    Notes
    -----

    cf and agn_ratios must have the keys 'NII-6585', 'SII-6718+6732',
    'SII-67I8', 'SII-6732', 'OIII-5008', 'Ha-6564', and 'Hb-4862'

    cf_ivar must have the keys 'NII-6585', 'SII-67I8', 'SII-6732',
    'OIII-5008', 'Ha-6564', and 'Hb-4862'
"""
    logterm = log_flux_to_luminosity(redshift=redshift)
    log_flux_o3 = log_luminosity_o3 - logterm

    ncf = dict()
    for channel in cf:
        ncf[channel] = cf[channel] + (10.**log_flux_o3) * agn_ratios[channel]
    detected, isagn, p1, p2, p3 = select_agn(cf=ncf, cf_ivar=cf_ivar, good=np.ones(1, dtype=bool))
    return(detected, isagn, p1, p2, p3)


def find_o3_limit(redshift=None, cf=None, cf_ivar=None, agn_ratios=None):
    """Find [OIII] luminosity limit

    Parameters
    ----------

    redshift : np.float32
        redshift of galaxy

    cf : dict of ndarray of np.float32
        fluxes for each line (1-element arrays)

    cf_ivar : dict of ndarray of np.float32
        inverse variance of fluxes for each line (1-element arrays)

    agn_ratios : dict of ndarray of np.float32
        ratios of lines relative to [OIII] for typical AGN

    Returns
    -------

    log_luminosity_o3_limit : np.float32
        limiting [OIII] luminosity

    Notes
    -----

    cf and agn_ratios must have the keys 'NII-6585', 'SII-6718+6732',
    'SII-67I8', 'SII-6732', 'OIII-5008', 'Ha-6564', and 'Hb-4862'

    cf_ivar must have the keys 'NII-6585', 'SII-67I8', 'SII-6732',
    'OIII-5008', 'Ha-6564', and 'Hb-4862'
"""
    bounds = np.array([15., 50.], dtype=np.float32)
    w0 = would_be_agn(redshift=redshift, cf=cf, cf_ivar=cf_ivar, agn_ratios=agn_ratios,
                      log_luminosity_o3=bounds[0])
    if(w0 == True):
        return(- 9999.)
    w1 = would_be_agn(redshift=redshift, cf=cf, cf_ivar=cf_ivar, agn_ratios=agn_ratios,
                      log_luminosity_o3=bounds[1])
    if(w1 == False):
        return(- 9999.)
    while((bounds[1] - bounds[0]) > 1.e-4):
        bounds_middle = 0.5 * (bounds[1] + bounds[0])
        detected, isagn, p1, p2, p3 = would_be_agn(redshift=redshift, cf=cf, cf_ivar=cf_ivar, agn_ratios=agn_ratios,
                                                   log_luminosity_o3=bounds_middle)
        if(isagn):
            bounds[1] = bounds_middle
        else:
            bounds[0] = bounds_middle
    log_luminosity_o3_limit = 0.5 * (bounds[1] + bounds[0])
    return(log_luminosity_o3_limit)


def plot_o3_limit(redshift=None, cf=None, cf_ivar=None, agn_ratios=None):
    """Plot path in P1-P3 space

    Parameters
    ----------

    redshift : np.float32
        redshift of galaxy

    cf : dict of ndarray of np.float32
        fluxes for each line (1-element arrays)

    cf_ivar : dict of ndarray of np.float32
        inverse variance of fluxes for each line (1-element arrays)

    agn_ratios : dict of ndarray of np.float32
        ratios of lines relative to [OIII] for typical AGN

    Notes
    -----

    cf and agn_ratios must have the keys 'NII-6585', 'SII-6718+6732',
    'SII-67I8', 'SII-6732', 'OIII-5008', 'Ha-6564', and 'Hb-4862'

    cf_ivar must have the keys 'NII-6585', 'SII-67I8', 'SII-6732',
    'OIII-5008', 'Ha-6564', and 'Hb-4862'
"""
    o3s = 35 + 10. * np.arange(1000) / 1000.
    test_detected = np.zeros(len(o3s), dtype=bool)
    test_isagn = np.zeros(len(o3s), dtype=bool)
    test_p1 = np.zeros(len(o3s), dtype=np.float32)
    test_p2 = np.zeros(len(o3s), dtype=np.float32)
    test_p3 = np.zeros(len(o3s), dtype=np.float32)
    for i, o3 in enumerate(o3s):
        tmp_detected, tmp_isagn, tmp_p1, tmp_p2, tmp_p3 = would_be_agn(redshift=redshift, cf=cf, cf_ivar=cf_ivar, agn_ratios=agn_ratios, log_luminosity_o3=o3)
        test_detected[i] = tmp_detected
        test_isagn[i] = tmp_isagn
        test_p1[i] = tmp_p1
        test_p2[i] = tmp_p2
        test_p3[i] = tmp_p3

    plt.plot(test_p1[test_detected], test_p3[test_detected], linewidth=2, color='black')
    plt.plot(test_p1[test_isagn], test_p3[test_isagn], linewidth=4, color='red')

    return


def select_agn(cf=None, cf_ivar=None, good=None):
    """Select AGN using P1 and P3

    Parameters
    ----------

    cf : dict of ndarrays of np.float32
        fluxes for each line

    cf_ivar : dict of ndarrays of np.float32
        inverse variance of fluxes for each line

    good : ndarray of bool
        whether to check each galaxy

    Returns
    -------

    detected : ndarray of bool
        are the necessary lines detected

    isagn : ndarray of bool
        is this an identified AGN

    p1 : ndarray of np.float32
        P1 component of Ji & Yan space

    p2 : ndarray of np.float32
        P2 component of Ji & Yan space

    p3 : ndarray of np.float32
        P3 component of Ji & Yan space

    Notes
    -----

    cf must have the keys 'NII-6585', 'SII-6718+6732',
    'SII-67I8', 'SII-6732', 'OIII-5008', 'Ha-6564', and 'Hb-4862'

    cf_ivar must have the keys 'NII-6585', 'SII-67I8', 'SII-6732',
    'OIII-5008', 'Ha-6564', and 'Hb-4862'
"""
    detected = good.copy()
    for channel in cf_ivar:
        detected = (detected & (cf[channel] * np.sqrt(cf_ivar[channel]) > 2.))

    tmp_n2ha = np.log10(cf['NII-6585'][detected] / cf['Ha-6564'][detected])
    tmp_s2ha = np.log10(cf['SII-6718+6732'][detected] / cf['Ha-6564'][detected])
    tmp_o3hb = np.log10(cf['OIII-5008'][detected] / cf['Hb-4862'][detected])
    tmp_p1, tmp_p2, tmp_p3 = mnsa.jiyan.ratios_to_pspace(n2ha=tmp_n2ha,
                                                         s2ha=tmp_s2ha,
                                                         o3hb=tmp_o3hb)
    p1 = np.zeros(len(good), dtype=np.float32) - 9999.
    p2 = np.zeros(len(good), dtype=np.float32) - 9999.
    p3 = np.zeros(len(good), dtype=np.float32) - 9999.
    p1[detected] = tmp_p1
    p2[detected] = tmp_p2
    p3[detected] = tmp_p3

    isagn = ((detected) & (p1 > - 0.3) & (p3 > 0.5))

    return(detected, isagn, p1, p2, p3)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Select Ji and Yan-style AGN.')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.1',
                        help='MNSA configuration version')

    parser.add_argument('-d', '--debug', dest='debug',
                        action='store_true', default=False,
                        help='debugging plots')

    args = parser.parse_args()
    version = args.version
    debug = args.debug

    summary = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                       '0.3.1', 'mnsa-0.3.1.fits'),
                          ext='SUMMARY')
    sps = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                   '0.3.1', 'mnsa-0.3.1.fits'),
                      ext='SPS_AP04')
    pipe3d = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                      '0.3.1', 'mnsa-0.3.1.fits'),
                         ext='PIPE3D')

    cffile = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis',
                          'central_flux',
                          'central-flux-{version}.fits'.format(version=version))
    central_flux = fitsio.read(cffile, ext='FLUXES')
    channels = fitsio.read(cffile, ext='CHANNELS_EMLINE_GFLUX')

    ichannel = dict()
    for channel in ['Hb-4862', 'OIII-5008', 'Ha-6564', 'NII-6585',
                    'SII-6718', 'SII-6732']:
        ichannel[channel] = np.where(channels['channel'] == channel)[0][0]

    cf = dict()
    cf_ivar = dict()
    cf_nbad = dict()
    for channel in ichannel:
        cf[channel] = central_flux['central_emline_gflux'][:, ichannel[channel]]
        cf_ivar[channel] = central_flux['central_emline_gflux_ivar'][:, ichannel[channel]]
        cf_nbad[channel] = central_flux['central_emline_gflux_nbad'][:, ichannel[channel]]
    cf['SII-6718+6732'] = cf['SII-6718'] + cf['SII-6732']

    good = np.ones(len(summary), dtype=bool)
    good = good & (sps['redshift'] > 0)
    for channel in ichannel:
        good = (good & (cf_ivar[channel] > 0.) & (cf_nbad[channel] < 4))

    detected, isagn, p1, p2, p3 = select_agn(cf=cf, cf_ivar=cf_ivar, good=good)

    # Find our AGN
    iagn = np.where(isagn)[0]
    log_agn_flux_o3 = np.log10(cf['OIII-5008'][iagn])
    logterm = log_flux_to_luminosity(redshift=sps['redshift'][iagn])
    log_agn_luminosity_o3 = log_agn_flux_o3 + logterm

    # Find typical line ratios relative to OIII
    n2o3 = cf['NII-6585'][iagn] / cf['OIII-5008'][iagn]
    s2ao3 = cf['SII-6718'][iagn] / cf['OIII-5008'][iagn]
    s2bo3 = cf['SII-6732'][iagn] / cf['OIII-5008'][iagn]
    hao3 = cf['Ha-6564'][iagn] / cf['OIII-5008'][iagn]
    hbo3 = cf['Hb-4862'][iagn] / cf['OIII-5008'][iagn]
    agn_ratios = dict()
    agn_ratios['OIII-5008'] = 1.
    agn_ratios['NII-6585'] = np.median(n2o3)
    agn_ratios['SII-6718'] = np.median(s2ao3)
    agn_ratios['SII-6732'] = np.median(s2bo3)
    agn_ratios['SII-6718+6732'] = agn_ratios['SII-6718'] + agn_ratios['SII-6732']
    agn_ratios['Ha-6564'] = np.median(hao3)
    agn_ratios['Hb-4862'] = np.median(hbo3)

    ilimit = np.where((good) & (isagn == False))[0]
    log_agn_luminosity_o3_limit = np.zeros(len(summary), dtype=np.float32)
    for i in ilimit:
        ccf = dict()
        for k in cf:
            ccf[k] = cf[k][i:i + 1]
        ccf_ivar = dict()
        for k in cf_ivar:
            ccf_ivar[k] = cf_ivar[k][i:i + 1]
        log_agn_luminosity_o3_limit[i] = find_o3_limit(redshift=sps['redshift'][i:i + 1],
                                                       cf=ccf,
                                                       cf_ivar=ccf_ivar,
                                                       agn_ratios=agn_ratios)
        if(debug):
            plt.scatter(p1[detected], p3[detected], s=1, color='grey')
            plot_o3_limit(redshift=sps['redshift'][i:i + 1],
                          cf=ccf, cf_ivar=ccf_ivar,
                          agn_ratios=agn_ratios)
            xmin = - 1.25
            xmax = 0.9
            ymin = - 0.3
            ymax = 1.35
            plt.xlim([xmin, xmax])
            plt.ylim([ymin, ymax])
            logterm = log_flux_to_luminosity(redshift=sps['redshift'][i])
            ol = np.log10(cf['OIII-5008'][i]) + logterm
            plt.title('ol={ol} logl={logl}'.format(ol=ol,
                                                   logl=log_agn_luminosity_o3_limit[i]))
            plt.show()

    agn_dtype = np.dtype([('plateifu', str, 20),
                          ('isagn', bool),
                          ('good', bool),
                          ('detected', bool),
                          ('p1', np.float32),
                          ('p2', np.float32),
                          ('p3', np.float32),
                          ('log_luminosity_o3', np.float32),
                          ('log_luminosity_o3_limit', np.float32)])

    agn = np.zeros(len(summary), dtype=agn_dtype)
    agn['plateifu'] = summary['plateifu']
    agn['isagn'][iagn] = True
    agn['good'] = good
    agn['detected'] = detected
    agn['p1'] = p1
    agn['p2'] = p2
    agn['p3'] = p3
    agn['log_luminosity_o3'] = - 9999.
    agn['log_luminosity_o3_limit'] = - 9999.
    agn['log_luminosity_o3'][iagn] = log_agn_luminosity_o3
    agn['log_luminosity_o3_limit'][ilimit] = log_agn_luminosity_o3_limit[ilimit]

    agnfile = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'jiyan-agn',
                           'jiyan-agn-{v}.fits')
    agnfile = agnfile.format(v=version)
    fitsio.write(agnfile, agn, clobber=True)
