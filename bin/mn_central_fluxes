#!/usr/bin/env python

import os
import sys
import multiprocessing
import argparse
import numpy as np
import fitsio
import mnsa.mnsa


flux_types = ['emline_sflux', 'emline_gflux']


def plateifu_dir(version=None):
    fluxdir = os.path.join(os.getenv('MNSA_DATA'),
                           version + '.analysis', 'central_flux',
                           'plateifus')
    return(fluxdir)


def plateifu_file(plateifu=None, version=None):
    fluxfile = os.path.join(plateifu_dir(version=version),
                            'central-flux-{v}-{p}.fits')
    fluxfile = fluxfile.format(p=plateifu, v=version)
    return(fluxfile)


def call_central_flux(i):
    s = done[i]
    print(" {p}".format(p=s['plateifu']), flush=True)
    m = mnsa.mnsa.MNSA(plateifu=s['plateifu'], version=version)
    fluxstr = np.zeros(1, dtype=fluxstr_dtype)
    fluxstr['plateifu'] = s['plateifu']
    for flux_type in flux_types:
        for ichannel, channel in enumerate(channels[flux_type]):
            cf, ci, cn = m.central_flux(channel=channel,
                                        ext=flux_type.upper())
            fluxstr['central_{t}'.format(t=flux_type)][0, ichannel] = cf
            fluxstr['central_{t}_ivar'.format(t=flux_type)][0, ichannel] = ci
            fluxstr['central_{t}_nbad'.format(t=flux_type)][0, ichannel] = cn

    print("Outputting fluxes", flush=True)
    fluxfile = plateifu_file(plateifu=s['plateifu'], version=version)
    fitsio.write(fluxfile, fluxstr, clobber=True)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Measure central line fluxes and errors')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, help='version name', required=True)

    args = parser.parse_args()
    version = args.version

    print("Reading done file", flush=True)
    done = fitsio.read(os.path.join(os.getenv('MNSA_DATA'),
                                    '{v}.analysis',
                                    'mn-{v}-done.fits').format(v=version))

    fluxstr_list = [('plateifu', str, 12)]

    print("Set up output structure", flush=True)
    m = mnsa.mnsa.MNSA(plateifu=done['plateifu'][0], version=version)
    m.read_maps()
    channels = dict()
    for flux_type in flux_types:
        channels[flux_type] = list(m.ichannel[flux_type.upper()].keys())
        fluxstr_list.append(('central_{t}'.format(t=flux_type),
                             np.float32, len(channels[flux_type])))
        fluxstr_list.append(('central_{t}_ivar'.format(t=flux_type),
                             np.float32, len(channels[flux_type])))
        fluxstr_list.append(('central_{t}_nbad'.format(t=flux_type),
                             np.int32, len(channels[flux_type])))
    fluxstr_dtype = np.dtype(fluxstr_list)

    print("Measuring central fluxes", flush=True)
    os.makedirs(plateifu_dir(version=version), exist_ok=True)
    with multiprocessing.Pool() as pool:
        pool.map(call_central_flux, np.arange(len(done), dtype=np.int32))

    print("Gather fluxes", flush=True)
    fluxstr = np.zeros(len(done), dtype=fluxstr_dtype)
    for i, s in enumerate(done):
        fluxfile = plateifu_file(plateifu=s['plateifu'],
                                 version=version)
        fluxstr[i] = fitsio.read(fluxfile)

    print("Outputting fluxes", flush=True)
    fluxfile = os.path.join(os.getenv('MNSA_DATA'),
                            version + '.analysis', 'central_flux',
                            'central-flux-{v}.fits')
    fluxfile = fluxfile.format(v=version)
    fitsio.write(fluxfile, fluxstr, extname='FLUXES', clobber=True)

    channel_dtype = np.dtype([('channel', str, 20)])
    for flux_type in flux_types:
        channel_str = np.zeros(len(channels[flux_type]),
                               dtype=channel_dtype)
        channel_str['channel'] = channels[flux_type]
        fitsio.write(fluxfile, channel_str,
                     extname='CHANNELS_{ft}'.format(ft=flux_type.upper()),
                     clobber=False)
