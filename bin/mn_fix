#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael Blanton
# @Date: Aug 21, 2020
# @Filename: mn_manga
# @License: BSD 3-Clause
# @Copyright: Michael Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import os
import sys
import argparse
import multiprocessing
import numpy as np
import astropy.io.fits
import fitsio
import mnsa.mnsa as mnsa
import mnsa.manga as manga
import mnsa.bandscale as bandscale

version = None


def fix(plateifu=None):
    print("Fixing {p}".format(p=plateifu), flush=True)

    m = mnsa.MNSA(version=version, plateifu=plateifu)
    cube = astropy.io.fits.open(m.manga_file, mode='update')

    # Create correct images
    wave = cube['WAVE'].data
    flux = cube['FLUX'].data
    gimage = bandscale.image(band='g', wave=wave, cube=flux)
    rimage = bandscale.image(band='r', wave=wave, cube=flux)
    iimage = bandscale.image(band='i', wave=wave, cube=flux)
    zimage = bandscale.image(band='z', wave=wave, cube=flux)
    
    cube['GIMG'].data = gimage
    cube['RIMG'].data = rimage
    cube['IIMG'].data = iimage
    cube['ZIMG'].data = zimage

    cube[5].name = 'LSFPOST'
    cube[6].name = 'LSFPRE'

    cube.close()
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Fixes images and LSF naming in a plate-ifu.')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='v0',
                        help='MNSA configuration version')

    parser.add_argument('-p', '--plate-ifu', dest='plateifu',
                        default=None,
                        required=False, type=str,
                        help='plate-ifu for MaNGA observations')

    parser.add_argument('-s', '--start', dest='start',
                        default=None,
                        required=False, type=int,
                        help='starting inex')

    parser.add_argument('-e', '--end', dest='end',
                        default=None,
                        required=False, type=int,
                        help='ending inex')

    args = parser.parse_args()
    version = args.version
    plateifu = args.plateifu
    drp_start = args.start
    drp_end = args.end

    if(plateifu is not None):
        fix(plateifu)
        sys.exit()

    drpfile = os.path.join(os.getenv('MNSA_DATA'),
                           'samples', '{version}',
                           'drpall-{version}.fits')
    drpfile = drpfile.format(version=version)

    drp = fitsio.read(drpfile)

    if(drp_start < 0):
        drp_start = 0
    if(drp_end < 0):
        drp_end = len(drp) - 1

    drp = drp[drp_start:drp_end + 1]
    
    iall = np.arange(len(drp), dtype=np.int32)
    with multiprocessing.Pool() as pool:
        pool.map(fix, drp['plateifu'][iall])
