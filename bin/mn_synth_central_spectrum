#!/usr/bin/env python


import os
import sys
import argparse
import multiprocessing
import numpy as np
import fitsio
import astropy.cosmology
import astropy.units
import mnsa.mnsa
import mnsa.mnsautils


cosmo = astropy.cosmology.Planck18


dr17 = False
done_keep = None
drpall_keep = None
desi_redshift = 0.35


def synth_central_spectrum(indx):
    d = done_keep[indx]
    drp = drpall_keep[indx]
    plateifu = d['plateifu']
    print(plateifu)
    if(drp['z'] < 0.001):
        return

    m = mnsa.mnsa.MNSA(version=version, plateifu=plateifu, dr17=dr17)
        
    manga_redshift = drp['z']

    manga_add = cosmo.angular_diameter_distance(manga_redshift)
    desi_add = cosmo.angular_diameter_distance(desi_redshift)
    scale = desi_add.value / manga_add.value

    radius = 1.5 * scale * 0.5
    seeing_fwhm = 0.9 * scale
    
    fiber_spectrum, fiber_spectrum_mask = m.fiber_spectrum(radius=radius, seeing_fwhm=seeing_fwhm)
        
    wave = m.cube['WAVE'].read()

    outdir = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis',
                          'synth_central')
    outfile = os.path.join(outdir, 'synth-central-{v}-{p}.fits'.format(v=version,
                                                                       p=plateifu))

    hdr = []
    hdr.append({'name': 'MNSAVER',
                'value': version,
                'comment': 'MNSA version'})
    hdr.append({'name': 'MANGA_Z',
                'value': manga_redshift,
                'comment': 'MaNGA redshift'})
    hdr.append({'name': 'DESI_Z',
                'value': desi_redshift,
                'comment': 'DESI redshift'})
    hdr.append({'name': 'ASCALE',
                'value': scale,
                'comment': 'Aperture scaling factor'})
    hdr.append({'name': 'FIBERRAD',
                'value': radius,
                'comment': 'Fiber radius (MaNGA arcsec)'})
    hdr.append({'name': 'SEEING',
                'value': seeing_fwhm,
                'comment': 'Seeing FWHM (MaNGA arcsec)'})

    fitsio.write(outfile, wave, extname='WAVE', header=hdr, clobber=True)
    fitsio.write(outfile, fiber_spectrum, extname='FLUX', clobber=False)
    fitsio.write(outfile, np.uint8(fiber_spectrum_mask), extname='MASK', clobber=False)

    return
    

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Output fiber spectra')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')
    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)
    parser.add_argument('-d', '--desi-redshift', dest='desi_redshift',
                        type=np.float32, default=0.35, required=False,
                        help='DESI redshift')

    args = parser.parse_args()
    version = args.version
    dr17 = args.dr17
    desi_redshift = args.desi_redshift

    done_file = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis',
                             'mnsa-done-{version}.fits'.format(version=version))
    done = fitsio.read(done_file)

    drpall_file = os.path.join(os.getenv('MNSA_DATA'), version, 'manga', 'redux',
                               version, 'drpall-{version}.fits'.format(version=version))
    drpall = fitsio.read(drpall_file)

    in_sample = mnsa.mnsautils.in_sample_galaxy(drpall)

    keep = (in_sample > 0) & (done['dap_done'] > 0)

    drpall_keep = drpall[keep]
    done_keep = done[keep]

    with multiprocessing.Pool() as pool:
        pool.map(synth_central_spectrum,
                 np.arange(len(drpall_keep), dtype=np.int32))
