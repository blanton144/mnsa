#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael Blanton
# @Date: Aug 21, 2020
# @Filename: mn_dlis
# @License: BSD 3-Clause
# @Copyright: Michael Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import copy
import numpy as np
import fitsio
import mnsa.utils.configuration as configuration
import mnsa.resample as resample

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Performs an arithmetic operation.')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='v0',
                        help='MNSA configuration version')

    parser.add_argument('-p', '--plate-ifu', dest='plateifu',
                        type=str, required=True,
                        help='plate-ifu for MaNGA observations')

    parser.add_argument('-k', '--clobber', dest='clobber',
                        action='store_true', required=False, default=False,
                        help='clobber existing files')

    args = parser.parse_args()
    version = args.version
    plateifu = args.plateifu
    clobber = args.clobber

    mnsa_config = configuration.MNSAConfig(version=version)
    cfg = mnsa_config.cfg

    pixscale = np.float32(cfg['General']['pixscale'])
    plate, ifu = [int(x) for x in plateifu.split('-')]
    bands = cfg['DLIS']['bands'].split()

    if('expand' in cfg['DLIS']):
        expand = np.int32(cfg['DLIS']['expand'])
    else:
        expand = 1

    resampled_dir = os.path.join(os.getenv('MNSA_DATA'),
                                 version, 'resampled',
                                 '{p}'.format(p=plate),
                                 '{pifu}'.format(pifu=plateifu))
    if(not os.path.exists(resampled_dir)):
        os.makedirs(resampled_dir)

    imaging_dir = os.path.join(os.getenv('MNSA_DATA'),
                               version, 'imaging',
                               '{p:05}'.format(p=plate),
                               plateifu)

    manga_dir = os.path.join(os.getenv('MNSA_DATA'),
                             version, 'manga', 'redux',
                             '{p}'.format(p=plate),
                             'stack')
    manga_file = os.path.join(manga_dir,
                              'manga-{plateifu}-LOGCUBE.fits.gz')
    manga_file = manga_file.format(plateifu=plateifu)

    hdr_out_orig = fitsio.read_header(manga_file, ext='FLUX')
    psf_out = fitsio.read(manga_file, ext='RPSF')

    for band in bands:
        dlis_manga_file = os.path.join(resampled_dir,
                                       'resampled-{plateifu}-{band}.fits')
        dlis_manga_file = dlis_manga_file.format(plateifu=plateifu, band=band)

        if(clobber is False):
            if(os.path.exists(dlis_manga_file)):
                print("File exists already for {f}".format(f=dlis_manga_file))
                continue

        hdr_out = copy.deepcopy(hdr_out_orig)
        naxis1 = (np.int32(hdr_out['NAXIS1']) + 1) * expand - 1
        naxis2 = (np.int32(hdr_out['NAXIS2']) + 1) * expand - 1
        if(naxis1 <= 63):
            naxis1 = 63
        if(naxis2 <= 63):
            naxis2 = 63
        crpix1 = naxis1 // 2
        crpix2 = naxis2 // 2
        hdr_out['NAXIS1'] = naxis1
        hdr_out['NAXIS2'] = naxis2
        hdr_out['CRPIX1'] = crpix1
        hdr_out['CRPIX2'] = crpix2

        dlis_file = os.path.join(imaging_dir,
                                 '{plateifu}-custom-image-{band}.fits.fz')
        dlis_file = dlis_file.format(plateifu=plateifu, band=band)

        image, hdr_in = fitsio.read(dlis_file, header=True)

        invvar_file = os.path.join(imaging_dir,
                                 '{plateifu}-custom-invvar-{band}.fits.fz')
        invvar_file = invvar_file.format(plateifu=plateifu, band=band)

        invvar = fitsio.read(invvar_file, header=False)

        r = resample.Resample(image=image, invvar=invvar, input_header=hdr_in)
        r.set_output_header(hdr_out)
        r.set_output_psf(psf_out)
        image_down, var_down = r.downsample()
        ivar_down = 1. / var_down

        fitsio.write(dlis_manga_file, image_down, header=hdr_out, clobber=True)
        fitsio.write(dlis_manga_file, ivar_down, header=hdr_out, clobber=False)
