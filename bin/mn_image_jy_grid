#!/usr/bin/env python

# Plot images on P1-P3 space grid

import os
import sys
import subprocess
import argparse
import numpy as np
import scipy.ndimage
import matplotlib
import matplotlib.pyplot as plt
import fitsio
import mnsa.mnsa
import mnsa.imagetypes


matplotlib.rcParams['figure.figsize'] = [8., 6.]
matplotlib.rcParams['font.size'] = 24
matplotlib.rcParams['text.usetex'] = True


imagetypes = mnsa.imagetypes.ImageTypes()

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Make color grid')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    parser.add_argument('-g', '--grid-refine', dest='grid_refine',
                        type=int, default=1,
                        help='refinement factor of grid')

    parser.add_argument('-n', '--no-grid', dest='nogrid',
                        default=False,
                        action='store_true',
                        help='only plot points version')

    parser.add_argument('-a', '--agn', dest='agn',
                        default=False,
                        action='store_true',
                        help='show AGN classification box')

    parser.add_argument('-s', '--seed', dest='seed',
                        type=int, default=1,
                        help='random seed')

    choices = list(imagetypes.types.keys())
    choices.append('stellar_vel')
    choices.append('emline_gvel')
    parser.add_argument('-i', '--image-type', dest='image_type',
                        type=str, default='Ha-O3-Grey-Soft',
                        choices=choices,
                        help='image type')

    args = parser.parse_args()
    version = args.version
    grid_refine = args.grid_refine
    image_type = args.image_type
    nogrid = args.nogrid
    seed = args.seed
    agn = args.agn

    np.random.seed(seed)

    jyfile = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis',
                          'agn', 'jiyan',
                          'jiyan-agn-{version}.fits'.format(version=version))
    jiyan = fitsio.read(jyfile)

    detected = jiyan['detected']
    plateifu = jiyan['plateifu'][detected]
    p1 = jiyan['p1'][detected]
    p2 = jiyan['p2'][detected]
    p3 = jiyan['p3'][detected]
    p1_err = jiyan['p1_err'][detected]
    p2_err = jiyan['p2_err'][detected]
    p3_err = jiyan['p3_err'][detected]

    nx = 40
    ny = 30

    nx_grid = nx // 10 * grid_refine
    ny_grid = ny // 10 * grid_refine

    xmin = - 1.25
    xmax = 0.9
    ymin = - 0.3
    ymax = 1.35
    xbin = np.int32(nx * (p1 - xmin) / (xmax - xmin))
    ybin = np.int32(ny * (p3 - ymin) / (ymax - ymin))
    xgrid = np.int32(nx_grid * (p1 - xmin) / (xmax - xmin))
    ygrid = np.int32(ny_grid * (p3 - ymin) / (ymax - ymin))
    inbin = ((xbin >= 0) & (xbin < nx) & (ybin >= 0) & (ybin < ny))

    dist = np.zeros((ny, nx), dtype=np.float32)
    for xb, yb in zip(xbin[inbin], ybin[inbin]):
        dist[yb, xb] = dist[yb, xb] + 1.
    dist = np.arcsinh(scipy.ndimage.gaussian_filter(dist, 0.75))

    pngdir = os.path.join(os.getenv('MNSA_DATA'),
                          '{v}.analysis'.format(v=version),
                          'info', 'grid-images')

    fig, ax = plt.subplots()

    ax.scatter(p1, p3, color='black', s=10, alpha=0.18)
    ax.errorbar(p1, p3, xerr=p1_err, yerr=p3_err, color='black', fmt='none', alpha=0.15,
                linewidth=1)
    levels = dist.max() * np.array([0.5, 0.7, 0.87, 0.93])
    ax.contour(dist, origin='lower', extent=[xmin, xmax, ymin, ymax],
               colors='black', levels=levels, alpha=0.6, linewidths=2)

    if(agn):
        ax.add_patch(matplotlib.patches.Rectangle((- 0.3, 0.55), 5, 5, alpha=0.3, edgecolor='darkblue'))
        ax.plot([- 0.3, 5], [0.55, 0.55], linewidth=2, color='blue', alpha=0.5)
        ax.plot([- 0.3, - 0.3], [-5., 5.], linewidth=2, color='blue', alpha=0.5)
        xseyfert = xmin + (xmax - xmin) * 0.80
        yseyfert = ymin + (ymax - ymin) * 0.92
        plt.text(xseyfert, yseyfert, r'{\it Seyferts}',
                 bbox=dict(facecolor='white', alpha=0.6, boxstyle='round'))
        xliner = xmin + (xmax - xmin) * 0.80
        yliner = ymin + (ymax - ymin) * 0.06
        plt.text(xliner, yliner, r'{\it LINERs}',
                 bbox=dict(facecolor='white', alpha=0.6, boxstyle='round'))
        xsf = xmin + (xmax - xmin) * 0.02
        ysf = ymin + (ymax - ymin) * 0.92
        plt.text(xsf, ysf, r'{\it Star formers}',
                 bbox=dict(facecolor='white', alpha=0.6, boxstyle='round'))

    ax.set_xlim([xmin, xmax])
    ax.set_ylim([ymin, ymax])
    #ax.set_xlabel(r'$P1 = 0.63 {\rm [NII]}/{\rm H}\alpha + 0.51 {\rm [SII]}/{\rm H}\alpha + 0.59 {\rm [OIII]}/{\rm H}\beta$', fontsize=20)
    #ax.set_ylabel(r'$P3 = -0.46 {\rm [NII]}/{\rm H}\alpha - 0.37 {\rm [SII]}/{\rm H}\alpha + 0.81 {\rm [OIII]}/{\rm H}\beta$', fontsize=20)
    ax.set_xlabel(r'${\rm P1} = 0.63 {\rm N2} + 0.51 {\rm S2} + 0.59 {\rm R3}$', fontsize=22)
    ax.set_ylabel(r'${\rm P3} = -0.46 {\rm N2} - 0.37 {\rm S2} + 0.81 {\rm R3}$', fontsize=22)
    fig.tight_layout()
    pngfile = os.path.join(pngdir,
                           'points-p1p3-{t}-{g}-{s}-{v}.png'.format(t=image_type,
                                                                    g=grid_refine,
                                                                    s=seed,
                                                                    v=version))

    plt.savefig(pngfile, dpi=300)
    subprocess.run(['convert', pngfile, '-trim', pngfile])

    if(nogrid):
        sys.exit()

    fig, ax = plt.subplots()

    for ix in range(nx_grid):
        for iy in range(ny_grid):
            igrid = np.where((xgrid == ix) & (ygrid == iy))[0]
            if(len(igrid) < 1):
                continue
            np.random.shuffle(igrid)
            rgb = None
            for i in igrid:
                try:
                    cplateifu = plateifu[i]
                    m = mnsa.mnsa.MNSA(plateifu=cplateifu, version=version)
                    if((image_type == 'stellar_vel') |
                       (image_type == 'emline_gvel')):
                        rgb = m.velocity_image(ext=image_type, vlimit=130.)
                    else:
                        rgb = m.image(imagetype=image_type)
                    break
                except:
                    print("Skipping one")
                    continue
            if(rgb is None):
                continue
            rgb = rgb[1:-1, 1:-1, :]
            xgrid_min = xmin + (xmax - xmin) * np.float32(ix) / np.float32(nx_grid)
            xgrid_max = xmin + (xmax - xmin) * np.float32(ix + 1) / np.float32(nx_grid)
            ygrid_min = ymin + (ymax - ymin) * np.float32(iy) / np.float32(ny_grid)
            ygrid_max = ymin + (ymax - ymin) * np.float32(iy + 1) / np.float32(ny_grid)
            ax.imshow(rgb, origin='lower',
                      extent=[xgrid_min, xgrid_max, ygrid_min, ygrid_max],
                      aspect='auto')

    if(agn):
        ax.add_patch(matplotlib.patches.Rectangle((- 0.3, 0.5), 5, 5, alpha=0.18, edgecolor='none'))
        ax.add_patch(matplotlib.patches.Rectangle((- 0.3, 0.5), 5, 5, alpha=0.5, facecolor='none', edgecolor='darkblue'))

    levels = dist.max() * np.array([0.5, 0.7, 0.87, 0.93])
    ax.contour(dist, origin='lower', extent=[xmin, xmax, ymin, ymax],
               colors='grey', levels=levels, alpha=0.6, linewidths=3)
    ax.set_xlim([xmin, xmax])
    ax.set_ylim([ymin, ymax])
    ax.set_xlabel('$P1$')
    ax.set_ylabel('$P3$')
    fig.tight_layout()

    pngfile = os.path.join(pngdir, 'grid-p1p3-{t}-{g}-{s}-{v}.png'.format(t=image_type,
                                                                          g=grid_refine,
                                                                          s=seed,
                                                                          v=version))

    plt.savefig(pngfile, dpi=300)
    subprocess.run(['convert', pngfile, '-trim', pngfile])
