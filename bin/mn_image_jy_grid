#!/usr/bin/env python

# Plot images on P1-P3 space grid

import os
import sys
import argparse
import numpy as np
import scipy.ndimage
import matplotlib
import matplotlib.pyplot as plt
import fitsio
import mnsa.mnsa
import mnsa.imagetypes
import mnsa.jiyan


matplotlib.rcParams['figure.figsize'] = [8., 6.]
matplotlib.rcParams['font.size'] = 24
matplotlib.rcParams['text.usetex'] = True


imagetypes = mnsa.imagetypes.ImageTypes()

if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Make color grid')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.1',
                        help='MNSA configuration version')

    parser.add_argument('-g', '--grid-refine', dest='grid_refine',
                        type=int, default=1,
                        help='refinement factor of grid')

    parser.add_argument('-s', '--seed', dest='seed',
                        type=int, default=1,
                        help='random seed')

    choices = list(imagetypes.types.keys())
    choices.append('stellar_vel')
    choices.append('emline_gvel')
    parser.add_argument('-i', '--image-type', dest='image_type',
                        type=str, default='Ha-O3-Grey-Soft',
                        choices=choices,
                        help='image type')

    args = parser.parse_args()
    version = args.version
    grid_refine = args.grid_refine
    image_type = args.image_type
    seed = args.seed

    np.random.seed(seed)

    sumfile = os.path.join(os.getenv('MNSA_DATA'), version,
                           'mnsa-{version}.fits'.format(version=version))
    summary = fitsio.read(sumfile, ext='SUMMARY')

    cffile = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis',
                          'central_flux',
                          'central-flux-{version}.fits'.format(version=version))
    central_flux = fitsio.read(cffile, ext='FLUXES')
    channels = fitsio.read(cffile, ext='CHANNELS_EMLINE_GFLUX')

    ichannel = dict()
    for channel in ['Hb-4862', 'OIII-5008', 'Ha-6564', 'NII-6585',
                    'SII-6718', 'SII-6732']:
        ichannel[channel] = np.where(channels['channel'] == channel)[0][0]

    cf = dict()
    cf_ivar = dict()
    cf_nbad = dict()
    for channel in ichannel:
        cf[channel] = central_flux['central_emline_gflux'][:, ichannel[channel]]
        cf_ivar[channel] = central_flux['central_emline_gflux_ivar'][:, ichannel[channel]]
        cf_nbad[channel] = central_flux['central_emline_gflux_nbad'][:, ichannel[channel]]
    cf['SII-6718+6732'] = cf['SII-6718'] + cf['SII-6732']

    good = np.ones(len(summary), dtype=bool)
    for channel in ichannel:
        good = (good & (cf[channel] * np.sqrt(cf_ivar[channel]) > 3.) &
                (cf_ivar[channel] > 0.) & (cf_nbad[channel] < 4))

    summary = summary[good]

    n2ha = np.log10(cf['NII-6585'][good] / cf['Ha-6564'][good])
    s2ha = np.log10(cf['SII-6718+6732'][good] / cf['Ha-6564'][good])
    o3hb = np.log10(cf['OIII-5008'][good] / cf['Hb-4862'][good])

    p1, p2, p3 = mnsa.jiyan.ratios_to_pspace(n2ha=n2ha, s2ha=s2ha, o3hb=o3hb)

    nx = 40
    ny = 30

    nx_grid = nx // 10 * grid_refine
    ny_grid = ny // 10 * grid_refine

    xmin = - 1.25
    xmax = 0.9
    ymin = - 0.3
    ymax = 1.35
    xbin = np.int32(nx * (p1 - xmin) / (xmax - xmin))
    ybin = np.int32(ny * (p3 - ymin) / (ymax - ymin))
    xgrid = np.int32(nx_grid * (p1 - xmin) / (xmax - xmin))
    ygrid = np.int32(ny_grid * (p3 - ymin) / (ymax - ymin))
    inbin = ((xbin >= 0) & (xbin < nx) & (ybin >= 0) & (ybin < ny))

    dist = np.zeros((ny, nx), dtype=np.float32)
    for xb, yb in zip(xbin[inbin], ybin[inbin]):
        dist[yb, xb] = dist[yb, xb] + 1.
    dist = np.arcsinh(scipy.ndimage.gaussian_filter(dist, 0.75))

    fig, ax = plt.subplots()

    for ix in range(nx_grid):
        for iy in range(ny_grid):
            igrid = np.where((xgrid == ix) & (ygrid == iy))[0]
            if(len(igrid) < 1):
                continue
            np.random.shuffle(igrid)
            rgb = None
            for i in igrid:
                try:
                    plateifu = summary['plateifu'][i]
                    m = mnsa.mnsa.MNSA(plateifu=plateifu, version=version)
                    if((image_type == 'stellar_vel') |
                       (image_type == 'emline_gvel')):
                        rgb = m.velocity_image(ext=image_type, vlimit=130.)
                    else:
                        rgb = m.image(imagetype=image_type)
                    break
                except:
                    print("Skipping one")
                    continue
            if(rgb is None):
                continue
            rgb = rgb[1:-1, 1:-1, :]
            xgrid_min = xmin + (xmax - xmin) * np.float32(ix) / np.float32(nx_grid)
            xgrid_max = xmin + (xmax - xmin) * np.float32(ix + 1) / np.float32(nx_grid)
            ygrid_min = ymin + (ymax - ymin) * np.float32(iy) / np.float32(ny_grid)
            ygrid_max = ymin + (ymax - ymin) * np.float32(iy + 1) / np.float32(ny_grid)
            ax.imshow(rgb, origin='lower',
                      extent=[xgrid_min, xgrid_max, ygrid_min, ygrid_max],
                      aspect='auto')

    levels = dist.max() * np.array([0.5, 0.7, 0.87, 0.93])
    ax.contour(dist, origin='lower', extent=[xmin, xmax, ymin, ymax],
               colors='grey', levels=levels, alpha=0.6, linewidths=3)
    ax.set_xlim([xmin, xmax])
    ax.set_ylim([ymin, ymax])
    ax.set_xlabel('$P1$')
    ax.set_ylabel('$P3$')
    fig.tight_layout()

    pngdir = os.path.join(os.getenv('MNSA_DATA'),
                          '{v}.analysis'.format(v=version),
                          'info', 'grid-images')
    pngfile = 'grid-p1p3-{t}-{g}-{s}-{v}.png'.format(t=image_type,
                                                     g=grid_refine,
                                                     s=seed,
                                                     v=version)

    plt.savefig(pngfile, dpi=300)
