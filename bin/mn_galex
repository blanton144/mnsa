#!/usr/bin/env python
#
# @Author: Michael Blanton
# @Date: Aug 21, 2020
# @Filename: mn_galex
# @License: BSD 3-Clause
# @Copyright: Michael Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import copy
import numpy as np
import scipy.interpolate as interpolate
import fitsio
import mnsa.utils.configuration as configuration
import crr.reconstruct as reconstruct
import crr.sigma
import astropy.wcs as wcs


def psf_func(x, y, i):
    cx = np.float32(psf.shape[1] // 2)
    cy = np.float32(psf.shape[0] // 2)
    lx = x * 0.75 / 1.50
    ly = y * 0.75 / 1.50
    return(psf_interp(lx + cx, ly + cy, grid=False).flatten())


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Creates GALEX image at MaNGA sampling')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='v0',
                        help='MNSA configuration version')

    parser.add_argument('-p', '--plate-ifu', dest='plateifu',
                        type=str, required=True,
                        help='plate-ifu for MaNGA observations')

    parser.add_argument('-s', '--invvar-from-image', dest='invvar_from_image',
                        action='store_true', required=False, default=False,
                        help='use invvar calculated from image')

    parser.add_argument('-m', '--model', dest='save_model',
                        action='store_true', required=False, default=False,
                        help='save model')

    parser.add_argument('-n', '--nmc', dest='nmc',
                        type=np.int32, required=False, default=100,
                        help='number of MCs for errors')

    parser.add_argument('-c', '--clobber', dest='clobber',
                        action='store_true', required=False, default=False,
                        help='clobber existing files')

    parser.add_argument('-f', '--force-model', dest='force_model',
                        action='store_true', required=False, default=False,
                        help='force model')

    args = parser.parse_args()
    version = args.version
    plateifu = args.plateifu
    force_model = args.force_model
    save_model = args.save_model
    clobber = args.clobber
    nmc = args.nmc
    invvar_from_image = bool(args.invvar_from_image)

    pad = 12

    mnsa_config = configuration.MNSAConfig(version=version)
    cfg = mnsa_config.cfg

    plate, ifu = [int(x) for x in plateifu.split('-')]
    bands = cfg['GALEX']['bands'].split()

    resampled_dir = os.path.join(os.getenv('MNSA_DATA'),
                                 version, 'resampled',
                                 '{p}'.format(p=plate),
                                 '{pifu}'.format(pifu=plateifu))

    model_dir = os.path.join(os.getenv('MNSA_DATA'),
                             version, 'model',
                             '{p}'.format(p=plate),
                             '{pifu}'.format(pifu=plateifu))

    mask_file = os.path.join(resampled_dir,
                             'resampled-{plateifu}-mask.fits')
    mask_file = mask_file.format(plateifu=plateifu)
    if(not os.path.exists(mask_file)):
        print("Need mask file to exist first: {m}".format(m=mask_file))
        sys.exit(1)

    imaging_dir = os.path.join(os.getenv('MNSA_DATA'),
                               version, 'imaging',
                               '{p}'.format(p=plate),
                               plateifu)

    manga_dir = os.path.join(os.getenv('MNSA_DATA'),
                             version, 'manga', 'redux',
                             version,
                             '{p}'.format(p=plate),
                             'stack')
    manga_file = os.path.join(manga_dir,
                              'manga-{plateifu}-LOGCUBE.fits.gz')
    manga_file = manga_file.format(plateifu=plateifu)

    if(not os.path.exists(manga_file)):
        print("MaNGA file not found: {m}".format(m=manga_file))
        sys.exit(1)

    psf_out = fitsio.read(manga_file, ext='RPSF')
    psf_out = np.float32(psf_out)

    mask_hdus = ['MASK', 'MASK_MANGA', 'X_MANGA', 'Y_MANGA', 'X', 'Y']

    for band in bands:
        # Read in the header again in case it was altered below
        hdr_out = fitsio.read_header(mask_file, ext='MASK')

        galex_manga_file = os.path.join(resampled_dir,
                                        'resampled-{plateifu}-{band}.fits')
        galex_manga_file = galex_manga_file.format(plateifu=plateifu,
                                                   band=band)

        # skip if we have made this file already
        if(clobber is False):
            if(os.path.exists(galex_manga_file)):
                print("plate-ifu {p}: File exists already for {f}".format(f=galex_manga_file, p=plateifu), flush=True)
                continue

        # Read the GALEX PSF
        psf_file = os.path.join(imaging_dir,
                                '{plateifu}-custom-psf-{band}.fits.fz')
        psf_file = psf_file.format(plateifu=plateifu, band=band)

        if(os.path.exists(psf_file) is False):
            print("plate-ifu {p}: Skipping case where GALEX PSF missing: {p}".format(p=plateifu), flush=True)
            continue 

        print("plate-ifu {p}: Reading PSF: {f}".format(f=psf_file, p=plateifu), flush=True)
        psf = fitsio.read(psf_file)
        psf = psf / psf.sum()
        xpsf = np.arange(psf.shape[1])
        ypsf = np.arange(psf.shape[0])
        xxpsf = np.outer(np.ones(psf.shape[0]), xpsf) 
        yypsf = np.outer(ypsf, np.ones(psf.shape[1]))
        rrpsf = np.sqrt((xxpsf - (psf.shape[1] // 2))**2 +
                        (yypsf - (psf.shape[0] // 2))**2)
        psf = psf * (rrpsf < 30.)  # based on where PSF gets noisy
        psf = psf / psf.sum()
        psf_interp = interpolate.RectBivariateSpline(xpsf, ypsf, psf)

        # Read the GALEX data
        image_file = os.path.join(imaging_dir,
                                  '{plateifu}-custom-image-{band}.fits.fz')
        image_file = image_file.format(plateifu=plateifu, band=band)
        print("plate-ifu {p}: Reading image: {f}".format(f=image_file, p=plateifu), flush=True)
        image, hdr_in = fitsio.read(image_file, header=True)

        if(invvar_from_image is False):
            invvar_file = os.path.join(imaging_dir,
                                       '{plateifu}-custom-invvar-{band}.fits.fz')
            invvar_file = invvar_file.format(plateifu=plateifu, band=band)
            print("plate-ifu {p}: Reading invvar: {f}".format(f=invvar_file, p=plateifu), flush=True)
            invvar = fitsio.read(invvar_file)
            sig = 1. / np.sqrt(np.median(invvar))
        else:
            sig = crr.sigma.sigma(image)
            print("Setting constant invvar based on sigma={sig:.3e}".format(sig=sig), flush=True)
            invvar = np.zeros(image.shape, dtype=np.float32) + 1. / sig**2

        hdr_in['NAXIS1'] = image.shape[0]
        hdr_in['NAXIS2'] = image.shape[1]

        # Get the WCS info for input and output
        wcs_in = wcs.WCS(header=hdr_in)
        wcs_out = wcs.WCS(header=hdr_out, naxis=[1, 2])

        model_file = os.path.join(model_dir, '{plateifu}-A-{band}.fits')
        model_file = model_file.format(plateifu=plateifu, band=band)
        umodel_file = os.path.join(model_dir, '{plateifu}-untrimmed-A-{band}.fits')
        umodel_file = umodel_file.format(plateifu=plateifu, band=band)
        if(os.path.exists(model_file) & (force_model is False)):
            r = reconstruct.ReconstructWCS(filename=model_file)
        else:
            # Create a reconstruct object in order to calculate which
            # input pixels influence the output
            rall = reconstruct.ReconstructWCS(inwcs=wcs_in, outwcs=wcs_out)
            rall.psf = psf_func
            rall.set_Amatrix()
            coverage = rall.coverage()
            trim = coverage > 3.e-3

            if(save_model):
                os.makedirs(model_dir, exist_ok=True)
                rall.save_model(umodel_file)

            rall = 0

            # Create a reconstruct object with only the pixels with coverage
            r = reconstruct.ReconstructWCS(inwcs=wcs_in, outwcs=wcs_out,
                                           trim=trim, pad=pad)
            r.psf = psf_func
            r.set_Amatrix()
            r.set_svd()

            if(save_model):
                os.makedirs(model_dir, exist_ok=True)
                r.save_model(model_file)

        # Set the input array
        subimage = image[r.trim]
        subinvvar = invvar[r.trim]

        # Set the weights
        r.set_weights()

        # Apply weights to image and ivar
        image_G = r.apply_weights(subimage.flatten())
        inz = np.where(subinvvar > 0)[0]
        var_G = np.einsum('ij,j,ij->i', r.weights[:, inz],
                          1. / subinvvar[inz],
                          r.weights[:, inz]).reshape((r.nx, r.ny))
        ivar_G = 1. / var_G

        if(nmc > 0):
            print("plate-ifu {p}: Creating MC samples".format(p=plateifu), flush=True)
            image_MC = np.zeros((nmc, r.nx, r.ny), dtype=np.float32)
            ok = subinvvar > 0
            suberror = 1. / np.sqrt(subinvvar[ok])
            for imc in np.arange(nmc, dtype=np.int32):
                mcimage = subimage.copy()
                mcimage[ok] = mcimage[ok] + (suberror *
                                             np.random.normal(size=subinvvar.shape)[ok])
                image_MC[imc, :, :] = r.apply_weights(mcimage.flatten())

        # Apply weights to PSF image
        psf_samples = r.psf_samples()
        psf_G = r.apply_weights(psf_samples)

        os.makedirs(resampled_dir, exist_ok=True)
        fitsio.write(galex_manga_file, image_G[pad:-pad, pad:-pad],
                     header=hdr_out, extname='IMAGE', clobber=True)
        fitsio.write(galex_manga_file, ivar_G[pad:-pad, pad:-pad],
                     header=hdr_out, extname='IVAR', clobber=False)
        fitsio.write(galex_manga_file, psf_G[pad:-pad, pad:-pad],
                     header=hdr_out, extname='PSF', clobber=False)

        if(nmc > 0):
            fitsio.write(galex_manga_file, image_MC[:, pad:-pad, pad:-pad],
                         header=hdr_out, extname='MC', clobber=False)

        for mask_hdu in mask_hdus:
            d, h = fitsio.read(mask_file, ext=mask_hdu, header=True)
            fitsio.write(galex_manga_file, d, extname=mask_hdu, header=h, clobber=False)

        r = 0
