#!/usr/bin/env python

# Make some central-ish spectra as examples

import os
import sys
import argparse
import numpy as np
import fitsio
import mnsa.mnsa
import mnsa.mnsautils



if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Output some spectra')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.2',
                        help='MNSA configuration version')

    args = parser.parse_args()
    version = args.version

    done_file = os.path.join(os.getenv('MNSA_DATA'), version + '.analysis',
                             'mnsa-done-{version}.fits'.format(version=version))
    done = fitsio.read(done_file)

    drpall_file = os.path.join(os.getenv('MNSA_DATA'), version, 'manga', 'redux',
                               version, 'drpall-{version}.fits'.format(version=version))
    drpall = fitsio.read(drpall_file)

    in_sample = mnsa.mnsautils.in_sample_galaxy(drpall)

    keep = (in_sample > 0) & (done['dap_done'] > 0)

    drpall_keep = drpall[keep]
    done_keep = done[keep]

    for d, drp in zip(done_keep, drpall_keep):
        plateifu = d['plateifu']
        print(plateifu)
        if(drp['z'] < 0.001):
            continue

        m = mnsa.mnsa.MNSA(version=version, plateifu=plateifu)
        
        ba = 1.
        sma = 3.
        pa = 0.
        hex_spectrum, hex_spectrum_ivar = m.hex_spectrum(sma=sma, ba=ba, pa=pa)

        wave = m.cube['WAVE'].read() / (1. + drp['z'])

        fitsio.write('spectrum-{p}.fits'.format(p=plateifu), wave, extname='WAVE',
                     clobber=True)
        fitsio.write('spectrum-{p}.fits'.format(p=plateifu), hex_spectrum, extname='FLUX',
                     clobber=False)
        fitsio.write('spectrum-{p}.fits'.format(p=plateifu), hex_spectrum_ivar, extname='IVAR',
                     clobber=False)
