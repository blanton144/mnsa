#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael Blanton
# @Date: Aug 21, 2020
# @Filename: mn_manga
# @License: BSD 3-Clause
# @Copyright: Michael Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import mnsa.mnsa as mnsa
import fitsio
import multiprocessing


def create_image(indx):
    plateifu = drp['plateifu'][indx]
    print("Doing cube: {plateifu}".format(plateifu=plateifu), flush=True)
    m = mnsa.MNSA(version=version, plateifu=plateifu, dr17=dr17)
    try:
        m.read_cube()
        m.read_maps()
    except:
        print("Could not read cube and map.")
        return
    outdir = os.path.join(os.getenv('MNSA_DATA'), version,
                          'pngs', str(m.plate), str(m.ifu))
    os.makedirs(outdir, exist_ok=True)
    imagetype = 'Ha-O3-Grey'
    if(dr17 is False):
        outfile = os.path.join(outdir, 'mnsa-{plateifu}-{it}.png')
        outfile = outfile.format(plateifu=plateifu, it=imagetype)
    else:
        outfile = os.path.join(outdir, 'dr17-{plateifu}-{it}.png')
        outfile = outfile.format(plateifu=plateifu, it=imagetype)
    m.image(imagetype='Ha-O3-Grey', filename=outfile)
    return


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Performs an arithmetic operation.')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='v0',
                        help='MNSA configuration version')

    parser.add_argument('-s', '--start', dest='start',
                        type=np.int32, help='start index', default=-1)

    parser.add_argument('-e', '--end', dest='end',
                        type=np.int32, help='end index', default=-1)

    parser.add_argument('-o', '--old', dest='dr17',
                        required=False, help='dr17',
                        action='store_true',
                        default=False)

    args = parser.parse_args()
    version = args.version
    drp_start = args.start
    drp_end = args.end
    dr17 = args.dr17

    drpfile = os.path.join(os.getenv('MNSA_DATA'),
                           'samples', '{version}',
                           'drpall-{version}.fits')
    drpfile = drpfile.format(version=version)

    drp = fitsio.read(drpfile)

    if(drp_start < 0):
        drp_start = 0
    if(drp_end < 0):
        drp_end = len(drp) - 1

    drp = drp[drp_start:drp_end + 1]

    iall = np.arange(len(drp), dtype=np.int32)
    with multiprocessing.Pool() as pool:
        pool.map(create_image, iall)
