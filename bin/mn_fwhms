#!/usr/bin/env python
# encoding: utf-8
#
# @Author: Michael Blanton
# @Filename: mn_summary
# @License: BSD 3-Clause
# @Copyright: Michael Blanton


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import
from __future__ import unicode_literals

import argparse
import os
import sys
import numpy as np
import mnsa.mnsa as mnsa
import mnsa.kernel as kernel
import mnsa.reconstruct as reconstruct
import fitsio
import astropy.io.fits as afits


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        prog=os.path.basename(sys.argv[0]),
        description='Extracts MNSA and DR17 FWHMs for comparison.')

    parser.add_argument('-v', '--version', dest='version',
                        type=str, default='0.3.0',
                        help='MNSA configuration version')

    args = parser.parse_args()
    version = args.version

    sumfile = os.path.join(os.getenv('MNSA_DATA'), version,
                           'mn-{version}-summary.fits'.format(version=version))

    summary = fitsio.read(sumfile)

    fwhm_dtype = np.dtype([('manga_cube_done', bool),
                           ('gfwhm', np.float32),
                           ('rfwhm', np.float32),
                           ('ifwhm', np.float32),
                           ('zfwhm', np.float32),
                           ('gfwhm_dr17', np.float32),
                           ('rfwhm_dr17', np.float32),
                           ('ifwhm_dr17', np.float32),
                           ('zfwhm_dr17', np.float32),
                           ('seeing_mean', np.float32),
                           ('psffac_mean', np.float32)])
    fwhm = np.zeros(len(summary), dtype=fwhm_dtype)

    # There is some commented code here to recalculate
    # the FWHM if desired. This expands the seeing range,
    # and also can fit the DR17 data.
    #
    # There are basically zero differences with the MNSA
    # determinations (which are the same code with slightly
    # different parameters). For DR17 data, our method is a
    # slight overestimate (1-5%) of the FWHM determined by
    # the DRP. So the improvement quoted for MNSA is a
    # conservative estimate.
    #
    # print("Make kernel")
    # k = kernel.Kernel(rough_length=36, minseeing=0.2,
    #                  maxseeing=3., dkernel=0.05, nseeing=100)

    for indx, s in enumerate(summary):
        print(indx)
        if(s['manga_cube_done']):
            fwhm['manga_cube_done'][indx] = True
            m = mnsa.MNSA(version=version, plateifu=s['plateifu'], dr17=False)
            m17 = mnsa.MNSA(version=version, plateifu=s['plateifu'], dr17=True)

            f = afits.open(m.manga_base + '.fits.gz')
            hdr = f[0].header
            obsinfo = f['OBSINFO'].data
            # gimg = f['GPSF'].data
            # gfwhm = reconstruct.fit_fwhm(gimg, k)
            fwhm['gfwhm'][indx] = np.float32(hdr['GFWHM'])
            fwhm['rfwhm'][indx] = np.float32(hdr['RFWHM'])
            fwhm['ifwhm'][indx] = np.float32(hdr['IFWHM'])
            fwhm['zfwhm'][indx] = np.float32(hdr['ZFWHM'])
            fwhm['seeing_mean'][indx] = obsinfo['SEEING'].mean()
            fwhm['psffac_mean'][indx] = obsinfo['PSFFAC'].mean()

            f = afits.open(m17.manga_base + '.fits.gz')
            hdr = f[0].header
            # gimg = f['GPSF'].data
            # gfwhm = reconstruct.fit_fwhm(gimg, k, pixelscale=0.5)
            fwhm['gfwhm_dr17'][indx] = np.float32(hdr['GFWHM'])
            fwhm['rfwhm_dr17'][indx] = np.float32(hdr['RFWHM'])
            fwhm['ifwhm_dr17'][indx] = np.float32(hdr['IFWHM'])
            fwhm['zfwhm_dr17'][indx] = np.float32(hdr['ZFWHM'])

    outdir = os.path.join(os.getenv('MNSA_DATA'), version, 'info')
    outfile = os.path.join(outdir, 'mn-{v}-fwhms.fits'.format(v=version))
    fitsio.write(outfile, fwhm, clobber=True)
